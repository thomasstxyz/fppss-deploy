apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fppss-db
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fppss-db
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    matchLabels:
      component: fppss-db
  template:
    metadata:
      labels:
        component: fppss-db
        app.kubernetes.io/part-of: fppss-energy
        app.kubernetes.io/name: fppss-db
        app.kubernetes.io/version: "10.6"
    spec:
      volumes:
        - name: fppss-db
          persistentVolumeClaim:
            claimName: fppss-db
      containers:
        - name: fppss-db
          image: mariadb:10.6
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          env:
            - name: MARIADB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: fppss-energy-secret
                  key: fppss_db_name
            - name: MARIADB_USER
              valueFrom:
                secretKeyRef:
                  name: fppss-energy-secret
                  key: fppss_db_user
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fppss-energy-secret
                  key: fppss_db_password
            - name: MARIADB_RANDOM_ROOT_PASSWORD
              value: "yes"
          volumeMounts:
            - mountPath: "/var/lib/mysql"
              name: fppss-db
          resources: {}
---
apiVersion: v1
kind: Service
metadata:
  name: fppss-db
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    component: fppss-db
  ports:
  - name: mariadb
    port: 3306
    protocol: TCP
    targetPort: 3306
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fppss-rest-api
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    matchLabels:
      component: fppss-rest-api
  template:
    metadata:
      labels:
        component: fppss-rest-api
        app.kubernetes.io/part-of: fppss-energy
        app.kubernetes.io/name: fppss-rest-api
        app.kubernetes.io/version: "latest"
    spec:
      volumes:
      - name: sql-files
        emptyDir: {}
      initContainers:
      - name: copy-sql-files
        image: ghcr.io/2110781006/fppss-rest-api:0.1.0 # {"$imagepolicy": "flux-system:fppss-rest-api"}
        command: ['sh', '-c', 'cp -r /db-migrations/* /sql-files/']
        volumeMounts:
        - name: sql-files
          mountPath: /sql-files
      - name: wait-for-db
        image: ghcr.io/patrickdappollonio/wait-for:v1.0.0
        env:
        - name: DB_HOST
          value: "fppss-db:3306"
        command:
        - /wait-for
        args:
        - --host="google.com:443"
        - --host="$(DB_HOST)"
        - --timeout=1200s
        - --verbose
      - name: migrate-db
        image: flyway/flyway
        env:
        - name: FPPSS_DB_URL
          value: "jdbc:mysql://fppss-db:3306/fppss"
        - name: FPPSS_DB_USER
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: fppss_db_user
        - name: FPPSS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: fppss_db_password
        command: ['sh', '-c', 'flyway -url=${FPPSS_DB_URL} -user=${FPPSS_DB_USER} -password=${FPPSS_DB_PASSWORD} -connectRetries=60 migrate']
        volumeMounts:
        - name: sql-files
          mountPath: /flyway/sql
      containers:
      - name: fppss-rest-api
        image: ghcr.io/2110781006/fppss-rest-api:0.1.0 # {"$imagepolicy": "flux-system:fppss-rest-api"}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: FPPSS_KEY
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: fppss_key
        - name: FPPSS_DB_URL
          value: "jdbc:mysql://fppss-db:3306/fppss"
        - name: FPPSS_DB_USER
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: fppss_db_user
        - name: FPPSS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: fppss_db_password
        - name: FPPSS_KEYCLOAK_AUTH_SERVER_URL
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_auth_server_url
        - name: FPPSS_KEYCLOAK_REALM
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_realm
        - name: FPPSS_KEYCLOAK_RESOURCE
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_resource
        resources: {}
---
apiVersion: v1
kind: Service
metadata:
  name: fppss-rest-api
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    component: fppss-rest-api
  ports:
  - name: web
    port: 80
    protocol: TCP
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fppss-datacollector
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    matchLabels:
      component: fppss-datacollector
  template:
    metadata:
      labels:
        component: fppss-datacollector
        app.kubernetes.io/part-of: fppss-energy
        app.kubernetes.io/name: fppss-datacollector
        app.kubernetes.io/version: "latest"
    spec:
      initContainers:
      - name: wait-for-rest-api
        image: ghcr.io/patrickdappollonio/wait-for:v1.0.0
        env:
        - name: REST_API_URL
          value: "fppss-rest-api:80"
        command:
        - /wait-for
        args:
        - --host="google.com:443"
        - --host="$(REST_API_URL)"
        - --timeout=1200s
        - --verbose
      containers:
      - name: fppss-datacollector
        image: ghcr.io/2110781006/fppss-datacollector:0.1.0 # {"$imagepolicy": "flux-system:fppss-datacollector"}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: FPPSS_KEY
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: fppss_key
        - name: FPPSS_REST_URL
          value: "https://fppss-demo.thomasst.xyz"
        - name: FPPSS_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_interval
        - name: FPPSS_KEYCLOAK_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_resource
        - name: FPPSS_KEYCLOAK_USER
          value: "fppss"
        - name: FPPSS_KEYCLOAK_PASSWORD
          value: "fppss"
        - name: FPPSS_KEYCLOAK_TOKEN_URL
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_token_url
        resources:
          limits:
            memory: "256Mi"
            cpu: "250m"
          requests:
            memory: "64Mi"
            cpu: "40m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fppss-frontend
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    matchLabels:
      component: fppss-frontend
  template:
    metadata:
      labels:
        component: fppss-frontend
        app.kubernetes.io/part-of: fppss-energy
        app.kubernetes.io/name: fppss-frontend
        app.kubernetes.io/version: "latest"
    spec:
      initContainers:
      - name: wait-for-rest-api
        image: ghcr.io/patrickdappollonio/wait-for:v1.0.0
        env:
        - name: REST_API_URL
          value: "fppss-rest-api:80"
        command:
        - /wait-for
        args:
        - --host="google.com:443"
        - --host="$(REST_API_URL)"
        - --timeout=1200s
        - --verbose
      containers:
      - name: fppss-frontend
        image: ghcr.io/2110781006/fppss-frontend:0.0.1 # {"$imagepolicy": "flux-system:fppss-frontend"}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: FPPSS_REST_URL
          value: "https://fppss-demo.thomasst.xyz/api/v1/"
        - name: FPPSS_KEYCLOAK_URL
          value: "https://fppss-demo-sso.thomasst.xyz/auth/"
        - name: FPPSS_KEYCLOAK_REALM
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_realm
        - name: FPPSS_KEYCLOAK_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              name: fppss-demo
              key: fppss_keycloak_resource
        resources: {}
---
apiVersion: v1
kind: Service
metadata:
  name: fppss-frontend
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    component: fppss-frontend
  ports:
  - name: web
    port: 80
    protocol: TCP
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fppss-sso
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fppss-sso
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    matchLabels:
      component: fppss-sso
  template:
    metadata:
      labels:
        component: fppss-sso
        app.kubernetes.io/part-of: fppss-energy
        app.kubernetes.io/name: fppss-sso
        app.kubernetes.io/version: "latest"
    spec:
      containers:
      - name: fppss-sso
        image: docker.io/jboss/keycloak:16.1.1
        imagePullPolicy: IfNotPresent
        resources: {}
        ports:
        - containerPort: 8080
        env:
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: keycloak_user
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fppss-energy-secret
              key: keycloak_password
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: KEYCLOAK_IMPORT
          value: "/tmp/fppss-realm.json"
        volumeMounts:
        - name: realm-config
          mountPath: "/tmp/fppss-realm.json"
          subPath: "fppss-realm.json"
          readOnly: true
        - mountPath: "/opt/jboss/keycloak/standalone/data"
          name: fppss-sso
      volumes:
      - name: fppss-sso
        persistentVolumeClaim:
          claimName: fppss-sso
      - name: realm-config
        configMap:
          name: fppss-demo
          items:
          - key: fppss-realm.json
            path: fppss-realm.json
---
apiVersion: v1
kind: Service
metadata:
  name: fppss-sso
  namespace: fppss-energy
  labels:
    app: fppss-energy
spec:
  selector:
    component: fppss-sso
  ports:
  - name: web
    port: 80
    protocol: TCP
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fppss-demo
  namespace: fppss-energy
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.middlewares: default-http-redirect@kubernetescrd,default-cors-allow-origin@kubernetescrd
spec:
  rules:
  - host: fppss-demo.thomasst.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fppss-frontend
            port:
              number: 80
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: fppss-rest-api
            port:
              number: 80
  tls:
  - hosts:
    - fppss-demo.thomasst.xyz
    secretName: fppss-demo-tls
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fppss-demo-sso
  namespace: fppss-energy
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.middlewares: default-http-redirect@kubernetescrd,default-cors-allow-origin@kubernetescrd
spec:
  rules:
  - host: fppss-demo-sso.thomasst.xyz
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fppss-sso
            port:
              number: 80
  tls:
  - hosts:
    - fppss-demo-sso.thomasst.xyz
    secretName: fppss-demo-sso-tls
